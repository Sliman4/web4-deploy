#!/usr/bin/env node

const { Web3Storage } = require('web3.storage')

const CID = require('cids');
const { connect, keyStores, Account } = require('near-api-js');

const timeoutSignal = require("timeout-signal");
const fetch = require('node-fetch');

const { CarReader } = require('@ipld/car');
const { packToBlob } = require('ipfs-car/pack/blob');

(async () => {
    const args = process.argv.slice(2);
    if (args.length != 2) {
        console.error(`Usage:
    ipfs-deploy <src-directory> <destination-account.near>

`);

        process.exit(1);
    }

    const WEB3_TOKEN = process.env.WEB3_TOKEN;
    const ESTUARY_TOKEN = process.env.ESTUARY_TOKEN;
    if (!WEB3_TOKEN && !ESTUARY_TOKEN) {
        console.error(`
You need to set either WEB3_TOKEN or ESTUARY_TOKEN environment variable to allow IPFS pinning.

WEB3_TOKEN environment variable needs to be set to your web3.storage API token.
See https://web3.storage/docs/how-tos/generate-api-token/ for more information.

ESTUARY_TOKEN environment variable needs to be set to your Estuary API token.
See https://docs.estuary.tech/tutorial-get-an-api-key for more information.

`);
        process.exit(1);
    }

    const [ dir, accountId ] = args;

    console.log('Packaging files into a CAR file...');
    const { root, car } = await packToBlob({ input: dir, wrapWithDirectory: false });
    const carBuffer = Buffer.from(await car.arrayBuffer());

    if (ESTUARY_TOKEN) {
        console.log('Uploading CAR file to Estuary...');
        const addCar = await fetch('https://upload.estuary.tech/content/add-car', {
            headers: {
                'Authorization': `Bearer ${ESTUARY_TOKEN}`,
            },
            method: 'POST',
            body: carBuffer
        });

        if (!addCar.ok) {
            throw new Error('Failed to upload CAR file to Estuary');
        }
    }

    if (WEB3_TOKEN) {
        console.log('Uploading CAR file to web3.storage...')
        const storage = new Web3Storage({ token: WEB3_TOKEN })
        await storage.putCar(await CarReader.fromBytes(carBuffer));
    }

    const cid32 = new CID(root.toString()).toV1().toString('base32');

    const IPFS_GATEWAY_LIST = (process.env.IPFS_GATEWAY_LIST || 'ipfs.web4.near.page,cloudflare-ipfs.com,dweb.link').split(',');
    const IPFS_CHECK_DELAY = 3000;
    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
    let remainingGateways = [...IPFS_GATEWAY_LIST];
    do {
        await sleep(IPFS_CHECK_DELAY);
        await Promise.all(remainingGateways.map(async gateway => {
            const urlToCheck = `https://${gateway}/ipfs/${cid32}/`;
            console.log(`Checking ${urlToCheck}...`);
            try {
                const res = await fetch(urlToCheck, { signal: timeoutSignal(5000) });
                console.log(res.status, urlToCheck);
                if (res.status == 429) {
                    console.log('Too many requests, sleeping...');
                    await sleep(IPFS_CHECK_DELAY);
                }
                if (res.ok) {
                    remainingGateways = remainingGateways.filter(g => g != gateway);
                }
                return res;
            } catch (e) {
                console.error(urlToCheck, e);
                return { status: 500 };
            }
        }));
    } while (remainingGateways.length > 0);

    const url = `ipfs://${cid32}`;
    console.log('\nUpdating static url', url);

    const config = require('../src/config')(process.env.NODE_ENV);
    const near = await connect({
        ...config,
        keyStore: new keyStores.UnencryptedFileSystemKeyStore(`${process.env.HOME}/.near-credentials`)
    })
    let account = new Account(near.connection, accountId);
    const { transaction: { hash } } = await account.functionCall(accountId, 'web4_setStaticUrl', { url });
    console.log('Updated in transaction:', `${config.explorerUrl}/transactions/${hash}`);
})().catch(err => {
    console.error(err);
    process.exit(1);
});

