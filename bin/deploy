#!/usr/bin/env node

const { Web3Storage, getFilesFromPath } = require('web3.storage')

const CID = require('cids');
const { connect, keyStores, Account } = require('near-api-js');

const { promisify } = require('util');
const readdir = promisify(require('fs').readdir);
const timeoutSignal = require("timeout-signal");
const fetch = require('node-fetch');

(async () => {
    const args = process.argv.slice(2);
    if (args.length != 2) {
        console.error(`Usage:
    ipfs-deploy <src-directory> <destination-account.near>

`);

        process.exit(1);
    }

    const WEB3_TOKEN = process.env.WEB3_TOKEN;
    if (!WEB3_TOKEN) {
        console.error(`
WEB3_TOKEN environment variable needs to be set to your Web3.Storage API token.
See https://web3.storage/docs/how-tos/generate-api-token/ for more information.

`);
        process.exit(1);
    }

    const storage = new Web3Storage({ token: WEB3_TOKEN })

    const [ dir, accountId ] = args;

    const dirContents = await readdir(dir);
    const files = await getFilesFromPath(dirContents.map(f => `${dir}/${f}`));
    console.log('Uploading files to web3.storage...')
    const cid = await storage.put(files);

    const cid32 = new CID(cid).toV1().toString('base32');

    const IPFS_GATEWAY_LIST = (process.env.IPFS_GATEWAY_LIST || 'ipfs.web4.near.page,ipfs.io,cloudflare-ipfs.com,dweb.link').split(',');
    const IPFS_CHECK_DELAY = 3000;
    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
    let done;
    do {
        await sleep(IPFS_CHECK_DELAY);
        const results = await Promise.all(IPFS_GATEWAY_LIST.map(async gateway => {
            const urlToCheck = `https://${gateway}/ipfs/${cid32}/`;
            console.log(`Checking ${urlToCheck}...`);
            try {
                const res = await fetch(urlToCheck, { signal: timeoutSignal(5000) });
                console.log(res.status, urlToCheck);
                if (res.status == 429) {
                    console.log('Too many requests, sleeping...');
                    await sleep(IPFS_CHECK_DELAY);
                }
                return res;
            } catch (e) {
                console.error(urlToCheck, e);
                return { status: 500 };
            }
        }));
        done = results.every(r => r.status == 200);
    } while (!done);

    const url = `ipfs://${cid32}`;
    console.log('\nUpdating static url', url);

    const config = require('../src/config')(process.env.NODE_ENV);
    const near = await connect({
        ...config,
        keyStore: new keyStores.UnencryptedFileSystemKeyStore(`${process.env.HOME}/.near-credentials`)
    })
    let account = new Account(near.connection, accountId);
    const { transaction: { hash } } = await account.functionCall(accountId, 'web4_setStaticUrl', { url });
    console.log('Updated in transaction:', `${config.explorerUrl}/transactions/${hash}`);
})().catch(err => {
    console.error(err);
    process.exit(1);
});

